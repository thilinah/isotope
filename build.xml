<?xml version="1.0" encoding="UTF-8"?>
<project name="isotope" default="build">
    <!-- By default, we assume all tools to be on the $PATH -->
    <property name="toolsdir" value=""/>
    <property name="buildroot" value="/tmp/isotope"/>
    <property name="destination" value="${buildroot}/build/app"/>
    <property name="origin" value="${buildroot}/src"/>
    <property environment="env"/>
    <property name="env.appname" value="isotope"/>
    <property name="env.version" value="dev"/>
    <property name="installpath" value="/Applications/XAMPP/xamppfiles/htdocs/isotope-core"/>


    <target name="build"
            depends="prepare,lint,copyapp,install"
            description=""/>

    <target name="buildlocal"
            depends="prepare,copyapp"
            description=""/>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${buildroot}/build/api"/>
        <delete dir="${buildroot}/build/coverage"/>
        <delete dir="${buildroot}/build/logs"/>
        <delete dir="${buildroot}/build/pdepend"/>
        <delete dir="${buildroot}/build/phpdox"/>
        <delete dir="${buildroot}/build/test"/>
        <delete dir="${buildroot}/build/app"/>
        <delete dir="${buildroot}/build/release"/>
        <delete dir="${buildroot}"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${buildroot}"/>
        <mkdir dir="${buildroot}/build/api"/>
        <mkdir dir="${buildroot}/build/coverage"/>
        <mkdir dir="${buildroot}/build/logs"/>
        <mkdir dir="${buildroot}/build/pdepend"/>
        <mkdir dir="${buildroot}/build/phpdox"/>
        <mkdir dir="${buildroot}/build/test"/>
        <mkdir dir="${buildroot}/build/app"/>
        <mkdir dir="${buildroot}/build/release/data"/>
        <mkdir dir="${buildroot}/build/release/data/${env.appname}_${env.version}"/>
        <mkdir dir="${buildroot}/src/lib"/>

        <copy todir="${buildroot}" overwrite="true">
            <fileset dir="${basedir}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${buildroot}/src/lib" overwrite="true">
            <fileset dir="${buildroot}/lib">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${buildroot}/src" overwrite="true">
            <fileset dir="${buildroot}/core-ext">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${buildroot}/src">
            <fileset dir="${buildroot}/ext">
                <include name="**/*"/>
            </fileset>
        </copy>

        <copy todir="${buildroot}/src">
            <fileset dir="${buildroot}/tp">
                <include name="**/*"/>
            </fileset>
        </copy>

        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${buildroot}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${buildroot}/test">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg path="${buildroot}/src" />
            <arg path="${buildroot}/tests" />
        </exec>
    </target>

    <target name="phploc-ci"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${buildroot}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${buildroot}/build/logs/phploc.xml" />
            <arg path="${buildroot}/src" />
            <arg path="${buildroot}/tests" />
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${buildroot}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${buildroot}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${buildroot}/build/pdepend/overview-pyramid.svg" />
            <arg path="${buildroot}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${buildroot}/src" />
            <arg value="text" />
            <arg path="${buildroot}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${buildroot}/src" />
            <arg value="xml" />
            <arg path="${buildroot}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${buildroot}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${buildroot}/src" />
            <arg path="${buildroot}/tests" />
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${buildroot}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${buildroot}/src" />
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcpd">
            <arg path="${buildroot}/src" />
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${buildroot}/build/logs/pmd-cpd.xml" />
            <arg path="${buildroot}/src" />
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${buildroot}/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpdox"
            depends=""
            description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox"/>
    </target>



    <target name="copyapp"
            depends=""
            description="Copy generated files to QA app">

        <delete includeemptydirs="true">
            <fileset dir="${destination}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <copy todir="${destination}">
            <fileset dir="${origin}">
                <include name="**/*"/>
            </fileset>
        </copy>

    </target>

    <target name="install"
            depends="copyapp"
            description="">

        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${installpath}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <mkdir dir="${installpath}"/>

        <copy todir="${installpath}">
            <fileset dir="${origin}">
                <include name="**/*"/>
            </fileset>
        </copy>

    </target>



</project>

